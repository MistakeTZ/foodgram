name: Foodgram workflow

on:
  push:
    branches:
      - main

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Lint with flake8
        run: |
          flake8 backend

  test_backend:
    name: Run backend tests
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: foodgram_user
          POSTGRES_PASSWORD: foodgram_password
          POSTGRES_DB: foodgram
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Wait for Postgres
        run: |
          until pg_isready -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER; do
            echo "Waiting for database..."
            sleep 1
          done
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: foodgram_user

      - name: Run tests
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: foodgram
          POSTGRES_USER: foodgram_user
          POSTGRES_PASSWORD: foodgram_password
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          cd backend
          pytest -v
  
  build_and_push_backend:
    name: Build and push backend
    runs-on: ubuntu-latest
    needs: test_backend

    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
  
  build_and_push_frontend:
    name: Build and push frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build & Push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  build_and_push_gateway:
    name: Push Gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build & Push Gateway
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_and_push_backend
      - build_and_push_frontend
      - build_and_push_gateway
    steps:
      - uses: actions/checkout@v3
      - name: Copy docker-compose.yml via SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "foodgram"
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd foodgram
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            sudo docker image prune -af

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send Telegram Notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: "Деплой успешно выполнен! ✅"